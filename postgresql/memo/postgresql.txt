PostgreSQL
	웹 서비스, 빅데이터 등 다양한 분야에서 널리 사용되는 오픈소스 DBMS이다.
	Oracle과 유사한 기능들을 많이 포함하고 있으며, ANSI SQL 표준을 거의 완벽하게 지원한다.
	복잡한 쿼리 처리와 확장 기능에 강하며, 데이터 무결성 및 트랜잭션 관리에 매우 강력하다.

PostgreSQL 설치
	https://www.enterprisedb.com/downloads/postgres-postgresql-downloads

PostgreSQL 기초 문법
	- 사용자 생성
			
		create user [사용자명] with password '[비밀번호]';
		create database [데이터베이스명];
		alter user [사용자명] with superuser;
		psql -U [사용자명] -d [데이터베이스명]
	- 데이터베이스 목록: \l
	- 데이터베이스 접속: \c [데이터베이스명]
	- 사용가능한 계정 목록 조회: \du
	- 데이터베이스 삭제
		psql -U postgres -d postgres
		drop database [데이터베이스명];
	- 사용자 삭제
		alter user [사용자명] with nosuperuser;
		drop role [사용자명];

PostgreSQL 자료형

	정수형
		smallint: -32,768 ~ 32,767
		integer 또는 int: -2,147,483,648 ~ 2,147,483,647
		bigint: -9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807

	실수형
		real: 약 6자리 십진수, 메모리와 저장 공간을 적게 쓰면서 대략적인 실수값이 필요할 때
		double precision: 약 15자리 십진수, 더 높은 정밀도의 부동소수점이 필요할 때
		numeric(전체 자릿수, 소수점 이하 자릿수), decimal(전체 자릿수, 소수점 이하 자릿수): 가변 길이의 정확한 소수점 수, 속도 상대적으로 느림

	문자형
		char(길이): 고정 길이
		varchar(길이): 가변 길이
		text: 가변 길이, 최대 길이 제한 없음

		문자열 연결(concatenation): ||, A || B

	날짜/시간형
		date: 날짜
		time: 시간
		timestamp: 날짜+시간
		timestamptz: timezone 포함
		
		※ 최초 한 번 시간을 맞춰주어야 한다.
		set timezone = 'Asia/Seoul';
		select now();
		
		select to_char(now(), 'YYYY-MM-DD');         -- '2025-09-22'
		select to_char(now(), 'YYYY-MM-DD HH24:MI:SS'); -- '2025-09-22 14:30:00'
		select to_char(current_date, 'YYYYMMDD');    -- '20250922'

		select to_date('2025-09-22', 'YYYY-MM-DD');
		select to_timestamp('2025-09-22 14:30:00', 'YYYY-MM-DD HH24:MI:SS');

	논리형
		boolean (true, false)

	ENUM
		ENUM은 특정 열(column)에 허용될 수 있는 고정된 문자열 값의 목록을 정의할 때 사용하는 자료형이다.
		MySQL에서는 ENUM('값1', '값2', ...)처럼 바로 사용되지만, PostgreSQL에서는 사용자 정의 타입으로 별도 생성해야 한다.
		
		create type gender as enum('남', '여')
		[컬럼명] [자료형(enum명)] default '값',
		alter type gender add value '선택안함';
		- 부분 삭제는 불가하기 때문에 전체 삭제 후 다시 생성해야 한다.

시퀀스
	직접 값을 넣을 수 없도록 제한
		generated always as identity
		예) id int generated always as identity primary key

	직접 값을 삽입할 수 있지만, 값이 없으면 자동 증가
		generated by default as identity
		예) id int generated by default as identity primary key

인덱스
	문자열 like 조회는 Gin(Generalized Inverted Index) index를 사용한다.
	일반적인 인덱스인 B-tree는 정렬된 값을 기반으로 검색하지만
	Gin 인덱스는 한 개의 컬럼(데이터)에 여러 개의 값(단어)이 들어가는 경우 사용한다.
	
	- like 'keyword%' 일 경우만 적용됨.
		create index 인덱스명 on 테이블명(컬럼명);
	
	- like '%keyword%' 일 경우도 적용됨.
		create extension if not exists pg_trgm; (최초 1번만)
		create index idx_member_name_trgm 
		on [테이블명]
		using gin ([컬럼명] gin_trgm_ops);
	
	- 자주 사용하는 컬럼에만 인덱스를 생성한다.
	- 너무 많은 인덱스는 오히려 성능이 저하된다.
	- SELECT에 조건절(WHERE), 정렬(ORDER BY), 조인(ON)에 자주 사용되는 컬럼 중심으로 설정한다.










